package Target;

import java.awt.Color;
import java.awt.Point;

import MedialAxis.DistanceMap;
import MedialAxis.MedialAxis;
import basicObjects.Cluster;

public class ChromosomeCluster extends Cluster {

	private double imgHeading;
    private int ChromosomeNimageID;
    private String metaData;
    private Color colorOShape;
    private int colorCount;
    private double aboveGroundLevel;
    private ChromosomeCluster next;
    private double sizex;
    private double sizey;
    private int chromosomeWidth[];
    private MedialAxis medialAxis;
    private DistanceMap distanceMap;
    
    public ChromosomeCluster(){
    	super();
    	initChromosomeCluster();
    }
	public ChromosomeCluster(int ChromosomeNum){
		super();
		initChromosomeCluster();
		this.ChromosomeNimageID=ChromosomeNum;
	}
	public ChromosomeCluster(Point size){
		super(size);
		initChromosomeCluster();
	}
    public ChromosomeCluster(short[][] map,int xPoint,int yPoint,int shapeColorID){
    	super(map,xPoint,yPoint,shapeColorID);
    	initChromosomeCluster();
        
    }
    public ChromosomeCluster(ChromosomeCluster makeNew){
    	super((Cluster)makeNew);
    	initChromosomeCluster();
        copyChromosome(makeNew);
    }
	public int getWidths(int pos){
		return this.chromosomeWidth[pos];
	}
	public void writeChromosomeWidths() {
		// TODO Auto-generated method stub
		System.out.print("Widths for this image: "+this.chromosomeWidth[0]+","+this.chromosomeWidth[0]);

	}

    private void initChromosomeCluster(){
        chromosomeWidth=new int[2];
        chromosomeWidth[0]=-1;
        chromosomeWidth[1]=-1;
    	this.metaData="";
    	colorOShape=new Color(0,0,0);
    	this.colorCount=0;
    	this.aboveGroundLevel=0;
    	this.distanceMap=new DistanceMap();
    	this.medialAxis=new MedialAxis();
    	next=null;
    }
    public void setImgHeading(double newHeading){
    	this.imgHeading=newHeading;
    }
    public double getImgHeading(){
    	return this.imgHeading;
    }
    public int getChromosomeNimageID(){
    	return this.ChromosomeNimageID;
    }
    public void setChromosomeNimageID(int ID){
    	this.ChromosomeNimageID=ID;
    }
    public String getMetaData(){
    	return this.metaData;
    }
    public void setMetaData(String data){
    	this.metaData=data;
    }
    public int getColorCount(){
    	return this.colorCount;
    }
    public void setColorCount(int count){
    	this.colorCount=count;
    }
    public void setColor(Color colorX){
    	this.colorOShape=colorX;
    }
    public Color getColor(){
    	return this.colorOShape;
    }
    public double getAGL(){
    	return this.aboveGroundLevel;
    }
    public void setAGL(double agl){
    	this.aboveGroundLevel=agl;
    }
    public ChromosomeCluster getNext(){
        return next;
    }
    public void setNext(ChromosomeCluster clusterN){
        next=clusterN;
    }
    public double getSizex(){
        return this.sizex;
    }
    public double getSizey(){
        return this.sizey;
    }
    public void setSizex(double size){
        this.sizex = size;
    }
    public void setSizey(double size){
        this.sizey = size;
    }
    public void copyChromosome(ChromosomeCluster copyChromosome){
    	this.metaData=copyChromosome.getMetaData();
    	this.aboveGroundLevel=copyChromosome.getAGL();
    	this.colorCount=copyChromosome.getColorCount();
    	this.ChromosomeNimageID=copyChromosome.getChromosomeNimageID();
    	colorOShape=copyChromosome.getColor();
    	this.imgHeading=copyChromosome.imgHeading;
        this.chromosomeWidth[0]=copyChromosome.chromosomeWidth[0];
        this.chromosomeWidth[1]=copyChromosome.chromosomeWidth[1];
        this.medialAxis=new MedialAxis(copyChromosome.medialAxis.getSkeltonPoints());

    }
}
